
 #include <FlexyStepper.h>
//#include <SpeedyStepper.h>


//
// pin assignments
//
const int BTN_R_PIN = 10;
const int BTN_L_PIN = 9;
const int LIMIT_R_PIN = 8;
const int LIMIT_L_PIN = 7;
const int MOTOR_STEP_PIN = 3;
const int MOTOR_DIRECTION_PIN = 4;


// MOTOR PARAMETERS
const int right = -1;
const int left = 1;
const int stepPerSecond = 2000;



////////////NO CHANGE
FlexyStepper stepper;


bool BTN_R;
bool BTN_L;
bool LIMIT_R;
bool LIMIT_L;
unsigned long timeSwitch;


void setup() 
{
  pinMode(BTN_R_PIN,INPUT);
  pinMode(BTN_L_PIN,INPUT);
  pinMode(LIMIT_R_PIN,INPUT);
  pinMode(LIMIT_L_PIN,INPUT);
  pinMode(MOTOR_STEP_PIN,OUTPUT);
  pinMode(MOTOR_DIRECTION_PIN,OUTPUT);
  stepper.connectToPins(MOTOR_STEP_PIN, MOTOR_DIRECTION_PIN);
  timeSwitch = millis();   
}



void loop(){
  if((millis() - timeSwitch)>250){
    BTN_R = digitalRead(BTN_R_PIN); 
    BTN_L = digitalRead(BTN_L_PIN);
    timeSwitch = millis();  
  }
    LIMIT_R = digitalRead(LIMIT_R_PIN); 
    LIMIT_L = digitalRead(LIMIT_L_PIN);


  if( (BTN_L == HIGH) && (LIMIT_L == LOW) ){
      moveMotor(left);
  }

  if( (BTN_R == HIGH) && (LIMIT_R == LOW) ){
      moveMotor(right);
  }

}

void moveMotor(int direction1){
  stepper.setSpeedInStepsPerSecond(stepPerSecond);
  stepper.setAccelerationInStepsPerSecondPerSecond(stepPerSecond);
  stepper.setTargetPositionRelativeInSteps(200*direction1);
  stepper.setCurrentPositionInSteps((stepPerSecond-1)*direction1);
  stepper.processMovement();
}
